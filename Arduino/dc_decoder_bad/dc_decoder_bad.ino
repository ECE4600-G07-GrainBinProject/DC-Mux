
 int anArray [48][28] =
 {
{0	0	-	-	0	0	0	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	1	0	0	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	0	1	0	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	1	1	0	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	0	0	1	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	1	0	1	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	0	1	1	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{0	0	-	-	1	1	1	-	-	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	0	0	0	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	1	0	0	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	0	1	0	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	1	1	0	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	0	0	1	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	1	0	1	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	0	1	1	-	-	-	0	-	-	-	-	-	-	-	1	-}
{1	0	-	-	-	-	-	-	-	-	1	-	1	1	1	-	-	-	0	-	-	-	-	-	-	-	1	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	0	0	0	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	1	0	0	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	0	1	0	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	1	1	0	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	0	0	1	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	1	0	1	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	0	1	1	-	-	-	0	-}
{0	1	-	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	1	1	1	-	-	-	0	-}
{-	-	0	0	-	-	-	0	0	0	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	1	0	0	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	0	1	0	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	1	1	0	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	0	0	1	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	1	0	1	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	0	1	1	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	0	0	-	-	-	1	1	1	-	0	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	0	0	0	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	1	0	0	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	0	1	0	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	1	1	0	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	0	0	1	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	1	0	1	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	0	1	1	-	0	-	-	-	-	-	-	-	1}
{-	-	1	0	-	-	-	-	-	-	-	1	-	-	-	1	1	1	-	0	-	-	-	-	-	-	-	1}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	0	0	0	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	1	0	0	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	0	1	0	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	1	1	0	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	0	0	1	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	1	0	1	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	0	1	1	-	0}
{-	-	0	1	-	-	-	-	-	-	-	1	-	-	-	-	-	-	-	1	-	-	-	1	1	1	-	0}
}
 
int ledPins []

******************************************************************************
void setup() { //Find out the number of pins from Mohammad)
  // the array elements are numbered from 0 to (pinCount - 1).
  // use a for loop to initialize each pin as an output:
  for (int nCol = 0; thisPin < nNumCol; nCol++)  {
    pinMode(ledPins[thisPin], OUTPUT);      
  }
}

void loop() {
  // loop from the lowest pin to the highest:
   case i:
     int nRow = i;
    for (int nCol = 0; nCol < nNumCols; nCol++)
       if (anArray[nRow][nCol] == 1)
          // turn the pin on:
          digitalWrite(ledPins[thisPin], HIGH);                    
       else   
          // turn the pin off:
          digitalWrite(ledPins[thisPin], LOW);    
  }
